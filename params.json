{"name":"UDNZTimeline","tagline":"A light javascript library supporting multiple browsers to draw smart, beauty and dynamic timelines.","body":"#UDNZTimeline\r\n\r\n##Overview\r\n* It is a light javascript library.\r\n* For helping you to build a smart, beauty and dynamic timeline.\r\n* Based on HTML5, CSS3 and jQuery.\r\n* Supporting Chrome, Firefox, Opera, Safari, and IE 9+ on PC/MAC and mobile (IPad, Android, Windows Phone).\r\n\r\n![Supporting Chrome, Firefox, Opera, Safari, and IE 9+ on PC/MAC and mobile](http://work.udnz.com/UDNZTimeline/demo/images/browsers_32x32.png)\r\n\r\n##Demo\r\n* http://work.udnz.com/UDNZTimeline/Demo/\r\n\r\n##Requirements\r\n* Javascript with jQuery.\r\n* Modern browser which is supporting HTML5 and CSS3.\r\n\r\n##Usage\r\n1. Include `timeline.css`, `jQuery.min.js` and `timeline.js`\r\n\r\n\t\t<link rel=\"stylesheet\" href=\"path/to/timeline.css\"/>\r\n\t\t<script src=\"path/to/jquery.min.js\"></script>\r\n\t\t<script src=\"path/to/timeline.js\"></script>\r\n\r\n2. Set up an element with an ID to handle the timeline.\r\n\r\n\t\t<div id=\"demo_1_container\"></div>\r\n\r\n3. Instantiate with `options`. If you are using multiple timelines in one page, `options` can be set on each individual timeline:<br />\r\n\r\n    See API: [Options](#options)\r\n\r\n\t\t$.UDNZTimeline({\r\n\t\t\t\"data_url\": \"url/or/path/to/data.json\",\r\n\t\t\t\"container\": {\r\n\t\t\t\t\"id\": \"demo_1_container\"\r\n\t\t\t}\r\n\t\t}).Draw();\r\n\r\n4. Build your data.\r\n\r\n    See API: [Data structure](#data-structure).\r\n\r\n5. Enjoy it!\r\n\r\n##Sample\r\n```HTML\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>UDNZTimeline by udnz.com</title>\r\n    <link rel=\"stylesheet\" href=\"path/to/timeline.css\"/>\r\n    <script src=\"path/to/jquery.min.js\"></script>\r\n    <script src=\"path/to/timeline.js\"></script>\r\n    <script>\r\n        $(function () {\r\n            $.UDNZTimeline({\r\n                \"data_url\": \"url/or/path/to/data.json\",\r\n                \"container\": {\r\n                    \"id\": \"demo_1_container\"\r\n                }\r\n            }).Draw();\r\n        });\r\n    </script>\r\n</head>\r\n<body>\r\n<div id=\"demo_1_container\"></div>\r\n</body>\r\n</html>\r\n```\r\n\r\n##API\r\n###Options\r\nLike other javascript librarys, you can define an `option` in JSON as well. Here are the structure and meanings:\r\n\r\n####Structure and default values\r\n```Javascript\r\n    // default values\r\n    var defaults = {\r\n        \"data_url\": \"Data/timeline-nodes.json\",\r\n        \"container\": {\r\n            \"id\": \"timeline_container\",\r\n            \"width\": 0,\r\n            \"height\": 250\r\n        },\r\n        \"figure\": {\r\n            \"offset\": {\r\n                x: 0,\r\n                y: 0\r\n            }\r\n        },\r\n        \"dots\": {\r\n            \"states\": {\r\n                \"normal\": {\r\n                    \"_stateId\": 0,\r\n                    \"color\": \"#C3C3C3\",\r\n                    \"color_background\": \"#ffffff\",\r\n                    \"radius\": 12,\r\n                    \"border\": 12\r\n                },\r\n                \"active\": {\r\n                    \"_stateId\": 1,\r\n                    \"color\": \"#ff8800\",\r\n                    \"color_background\": \"#ffffff\",\r\n                    \"radius\": 15,\r\n                    \"border\": 5\r\n                }\r\n            },\r\n            \"offsetY\": 50\r\n        },\r\n        \"lines\": {\r\n\t\t\t\"type\": \"solid\",\r\n            \"width\": 8,\r\n            \"color\": \"#C3C3C3\",\r\n            \"color_dotted\": \"#C3C3C3\",\r\n            \"color_bezier\": \"#C3C3C3\",\r\n            \"stroke_dasharray\": \"16, 8\"\r\n        },\r\n        \"board\": {\r\n            \"width\": 220,\r\n            \"color_background\": \"#FFFFFF\",\r\n            \"color_border\": \"#ff8800\",\r\n            \"margin\": 10,\r\n            \"border\": 5,\r\n            \"spliter_width\": 3\r\n        },\r\n        \"effect\": $.DEFINED_EFFECT_TYPE.fade | $.DEFINED_EFFECT_TYPE.translate\r\n    };\r\n    \r\n    // defined effects\r\n    $.DEFINED_EFFECT_TYPE = {\r\n        curt: 1,\r\n        fade: 2,\r\n        slide: 4,\r\n        translate: 8,\r\n        rotateX: 16,\r\n        rotateY: 32\r\n    };\r\n```\r\n\r\n**Tips:**\r\n* Some of the `effect` defined in `$.DEFINED_EFFECT_TYPE` could be combined.\r\n* Bezier lines could not be dotted.\r\n\r\n####Meanings\r\nOption  | Description\r\n------------- | -------------\r\noption.data_url  | **REQUIRED**. The path of JSON data. Supporting both relative or absolute URL.\r\noption.container.id | **REQUIRED**. The element ID of containner.\r\noption.container.width | [Optional] The width of timeline. Number, in `px`.\r\noption.container.height | [Optional] The height of timeline. Number, in `px`.\r\noption.figure.offset.x | [Optional] Global horizontal offset. Number, in `px`.\r\noption.figure.offset.y | [Optional] Global vertical offset. Number, in `px`.\r\n*option.dots.states.normal._stateId* | [Optional] Internal, please ignore it.\r\noption.dots.states.normal.color | [Optional] The color of nodes.\r\noption.dots.states.normal.color_background | [Optional] The background color of nodes.\r\noption.dots.states.normal.radius | [Optional] The radius of nodes. Number, in `px`.\r\noption.dots.states.normal.border | [Optional] The border of nodes. Number, in `px`.\r\n*option.dots.states.active._stateId* | [Optional] Internal, please ignore it.\r\noption.dots.states.active.color | [Optional] The color of nodes when mouse over.\r\noption.dots.states.active.color_background | [Optional] The background color of nodes when mouse over.\r\noption.dots.states.active.radius | [Optional] The radius of nodes when mouse over. Number, in `px`.\r\noption.dots.states.active.border | [Optional] The border of nodes when mouse over. Number, in `px`.\r\noption.dots.offsetY | [Optional] The vertical offset of branches. Number, in `px`.\r\noption.lines.type | [Optional] The type of lines. `dotted` or other values for solid line.\r\noption.lines.width | [Optional] The width of lines. Number, in `px`.\r\noption.lines.color | [Optional] The color of solid lines.\r\noption.lines.color_dotted | [Optional] The color of dotted lines.\r\noption.lines.color_bezier | [Optional] The color of bezier lines.\r\noption.lines.stoke_dasharray | [Optional] Makes sinse only if `option.lines.type`===`dotted`. The length of real and imaginary parts in dotted lines. Numbers, in `px`. e.g. `16 8`.\r\noption.board.width | [Optional] The width of detail board. Number, in `px`.\r\noption.board.color_background | [Optional] The background color of detail board.\r\noption.board.color_border | [Optional] The border color of detail board.\r\noption.board.margin | [Optional] The margin on left/right between the detail board and node. Number, in `px`.\r\noption.board.border | [Optional] The border width of detail board. Number, in `px`.\r\noption.board.spliter_width | [Optional] The width of spliter in detail board. Number, in `px`.\r\noption.effect | [Optional] The effect of displaying detail board. See: `$.DEFINED_EFFECT_TYPE`\r\n\r\n\r\n###Data structure\r\nThe data should be a relative or absolute URL, it will be loaded by Ajax while drawing the timeline.\r\nHere it is:\r\n\r\n####Structure\r\n\r\n```Javascript\r\n{\r\n    \"nodes\": [\r\n        {\r\n            \"nodeId\": // string,\r\n            \"title\": // string,\r\n            \"date\": // string in format of date and time, Not used so far.\r\n            \"percent\": // int,\r\n            \"description\": // string,\r\n            \"states\": // JSON object,\r\n            \"lines\": // JSON object,\r\n            \"board\": // JSON object,\r\n            \"nodes\":[\r\n                {\r\n                    \"nodeId\": // string,\r\n                    \"title\": // string,\r\n                    \"date\": // string in format of date time.,\r\n                    \"percent\": // int,\r\n                    \"description\": // string,\r\n                    \"offsetY\": // \"up\" or int,\r\n                    \"states\": // JSON object,\r\n                    \"lines\": // JSON object,\r\n                    \"board\": // JSON object,\r\n                },\r\n                // other nodes\r\n            ]\r\n        },\r\n        // other nodes\r\n    ]\r\n}\r\n```\r\n\r\n####Meanings\r\nData node  | Description\r\n------------- | -------------\r\nnodes.nodeId | **REQUIRED** Globally unique ID, levels ignored.\r\nnodes.title | **REQUIRED** The title which is displayed on the board as `header`\r\n*nodes.date* | [Optional] Not used so far.\r\nnodes.percent | **REQUIRED** The position of node.  Number, between 0 and 100. [0,100]\r\nnodes.description | **REQUIRED** The detail message which is displayed on the board as `content`\r\nnodes.states | [Optional] Same as `option.dots.states`\r\nnodes.lines | [Optional] Same as `option.lines`\r\nnodes.board | [Optional] Same as `option.board`\r\nnodes.nodes | [Optional] Array of branch nodes. They will be displayed as a branch.\r\nnodes.nodes.nodeId | **REQUIRED if `nodes.nodes` exists** Same as `nodes.nodeId`\r\nnodes.nodes.title | **REQUIRED if `nodes.nodes` exists** Same as `nodes.title`\r\n*nodes.nodes.date* | [Optional] Same as `nodes.date`\r\nnodes.nodes.percent | **REQUIRED if `nodes.nodes` exists** Same as `nodes.percent`\r\nnodes.nodes.description | **REQUIRED if `nodes.nodes` exists** Same as `nodes.description`\r\nnodes.nodes.offsetY | [Optional] Same as `option.dots.offsetY` Number, in `px`, or string `up`.\r\nnodes.nodes.states | [Optional] Same as `option.dots.states`\r\nnodes.nodes.lines | [Optional] Same as `option.lines`\r\nnodes.nodes.board | [Optional] Same as `option.board`\r\n\r\n###Methods\r\n```Javascript\r\n        /*\r\n         * Draw the timeline.\r\n         * */\r\n        Draw = function () {...}\r\n```\r\n\r\n```Javascript\r\n        /*\r\n         * Show a specified node.\r\n         * @nodeId: *required*, the ID of node.\r\n         * @delay: optional, the delay time in ms.\r\n         * */\r\n        ShowNode = function (nodeId, delay) {...}\r\n```\r\n\r\n```Javascript\r\n        /*\r\n         * Show a specified node without callback.\r\n         * @nodeId: *required*, the ID of node.\r\n         * @callback: *required*, function(callback_data) {...}\r\n         * */\r\n        ShowNodeCB = function (nodeId, callback, callback_data) {...}\r\n```\r\n\r\n```Javascript\r\n        /*\r\n         * Hide all nodes with delay.\r\n         * @delay: optional, the time of delay, in ms.\r\n         * */\r\n        HideNode = function (delay) {...}\r\n```\r\n\r\n```Javascript\r\n        /*\r\n         * Hide all nodes with callback.\r\n         * @callback: *required*, function(callback_data) {...}\r\n         * */\r\n        HideNodeCB = function (callback, callback_data) {...}\r\n```\r\n**Tips:**\r\n* You can call the method `ShowNode` as soon as the timeline drawed, like this:\r\n\r\n```Javascript \r\n// There must be a delay due to the method `Draw` needs time.\r\n$.UDNZTimeline(*options*).Draw().ShowNode('node_5',500);\r\n```\r\n\r\n* Perhaps you have noticed that the callback function appear to be earlier than the actual function calls `ShowNodeCB`/`HideNodeCB`, which is normal and correct. The reason why this is so, because the methods `ShowNodeCB`/`HideNodeCB` just specify an animation \"Show\"/\"Hide\", will not do any real work which needs time.\r\n\r\n## Change Log\r\n###### v1.0 (2/28/2014)\r\n*\tFirst release\r\n\t\r\n\r\n## License\r\nUDNZTimeline by Austin Luo (uonun) is licensed under a GPL License. Really all that's important to me is that please [let me know](http://work.udnz.com/Contact.aspx \"contact\") if you find any bug or improvement.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}